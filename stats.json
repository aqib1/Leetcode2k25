{"leetcode":{"easy":11,"hard":1,"medium":5,"shas":{"0136-single-number":{"0136-single-number.java":"f21c2bdb9d32c29a70acde9bd55834806884b15f","README.md":"c1fc84a677cd198edacf1b3bd6d029d9fb49369b","difficulty":"easy"},"README.md":{"":"95b8c5dc219403b09cf6ae589427278b98696a08"},"0220-contains-duplicate-iii":{"0220-contains-duplicate-iii.java":"c907d9531ae755beb08fb04ff78abe8ded9dfe6c","README.md":"4d6da745babc57c9a5d038076e8fc03f643ea4b6","difficulty":"hard"},"stats.json":{"":"9e0f150bf1b69ab79824ded93c7c2657482d9ddf"},"0110-balanced-binary-tree":{"0110-balanced-binary-tree.java":"f6d49b2ae0c1395affe567da3efa5cf51113f017","README.md":"1496517dcf0faedc819cbdf10d07de1900d95d9c","difficulty":"easy"},"0108-convert-sorted-array-to-binary-search-tree":{"0108-convert-sorted-array-to-binary-search-tree.java":"3d6ef7ba6f22ff21b26527a76f33c63e49010782","README.md":"243a2859e66a71742146af16ea68ff0ab438a502","difficulty":"easy","0108-convert-sorted-array-to-binary-search-tree.cpp":"548131e4d4b65157bb43ab2d5182638c596fbe73"},"0144-binary-tree-preorder-traversal":{"0144-binary-tree-preorder-traversal.go":"4e6df63569739e2596ec1e080f898d96b185d460","README.md":"2a9e1c4d5b165cf7667739cb5cd3e9fde9b49315","difficulty":"easy"},"0094-binary-tree-inorder-traversal":{"0094-binary-tree-inorder-traversal.go":"8e9b9149ac2da166dd7f967032ef96fa73724e03","README.md":"bd34dc7858ef18ca0298bb98d645a48123cf98b8","difficulty":"easy"},"0145-binary-tree-postorder-traversal":{"0145-binary-tree-postorder-traversal.java":"c94eee7d29f083ce313b134d109b666ef6e1b37c","README.md":"ac6ce4de8f4a2a59c2b312532094616b3d3c85b7","difficulty":"easy","0145-binary-tree-postorder-traversal.cpp":"c9bd53da8f8ab4554acb68cd6877293f1b8e60c8","0145-binary-tree-postorder-traversal.go":"2862bf287f4374e863f52fc28c5a91a875514108","0145-binary-tree-postorder-traversal.py":"572fd2be5cee5e42bf5a7f1b7671ecac3bf34267"},"0102-binary-tree-level-order-traversal":{"0102-binary-tree-level-order-traversal.java":"d925ee03fe324a3b8ba1ebf54b43185af0855d0f","README.md":"01b65fdfcb1f1937ab9e22e5e3338d581c1423eb","difficulty":"medium","0102-binary-tree-level-order-traversal.cpp":"099a7f8b2c4fbe56e25a4dd06723250d47f3bce0","0102-binary-tree-level-order-traversal.go":"a53b3b75aa96aa3f347737a1276fd69d60d05626","0102-binary-tree-level-order-traversal.py":"69f1c4459c101d0b0f3082726c4339e3f6642b17"},"0344-reverse-string":{"0344-reverse-string.java":"3eaba52cd16b808f92a30c1e14c3b7e8ec12c89b","README.md":"cb0dd646b4e63f8211c135fea3209d7e716ed692","difficulty":"easy","0344-reverse-string.cpp":"81aafbacd08ab3df2184355a6a0ca481512ca09c","0344-reverse-string.go":"374d2994cbc560ab8b9b2e81cb0f9b050179e9ac","0344-reverse-string.py":"c554d0e950d069c23b4e4680c1ba4ab173b07364"},"0104-maximum-depth-of-binary-tree":{"0104-maximum-depth-of-binary-tree.java":"4ee6888638213274b807f857334da831cb013494","README.md":"3e88d40eac7067a0b69cceb90c76020b6f152ae0","difficulty":"easy"},"0101-symmetric-tree":{"0101-symmetric-tree.java":"3c6fefe7d7335b71741895dfba3979714c73530c","README.md":"1f2113012a39cfbad1ebdddb1b47cba18e5fa452","difficulty":"easy","0101-symmetric-tree.cpp":"053e639e0ead1f97eeae8004ab8396ad4b7a2597","0101-symmetric-tree.go":"6c4c1aa1ee980b900ebe5e5e3f644457b3bc19ab","0101-symmetric-tree.py":"7ae2df0932b667fb84a4d0bc84b78fd773c0f862"},"0112-path-sum":{"0112-path-sum.go":"cec8e725240b1f9ed80fab9d74b0d4b5902113a3","README.md":"98772e551dafb6d42f9d932cfe0bd4fdf77d93d6","difficulty":"easy","0112-path-sum.py":"7d32ba25c5281c5a8bd8e6113249b161ab27cb4a"},"0250-count-univalue-subtrees":{"0250-count-univalue-subtrees.java":"663e1627b791fba816789b3884f66eec726bfa29","README.md":"905e601a170b53de39f1e31dae68c0c2f128a774","difficulty":"medium","0250-count-univalue-subtrees.cpp":"a955a50f4f7d6304a9df9a145cc85ceee4dc83a6"},"0106-construct-binary-tree-from-inorder-and-postorder-traversal":{"0106-construct-binary-tree-from-inorder-and-postorder-traversal.java":"6073ae21309048bbe4894d9534c20b91d415741f","README.md":"8169bc76429370954eb33bb078940c0a05066e29","difficulty":"medium"},"0105-construct-binary-tree-from-preorder-and-inorder-traversal":{"0105-construct-binary-tree-from-preorder-and-inorder-traversal.java":"91a054cd4df2b44f28954e4896899d0ab7b60bc7","README.md":"75ac83be2e52aa76ea9bd5c9c20537a499cb9ec0","difficulty":"medium","0105-construct-binary-tree-from-preorder-and-inorder-traversal.cpp":"afc618a8d02d9fbc496f918cfd4e9eb3e04f5ec7"},"1013-fibonacci-number":{"1013-fibonacci-number.java":"b4cc8dc0ca5e27c9c556f674153d63b37eaa5f31","README.md":"2ac4ae56a3b012f1cae799cadcf8d8465aa0c385","difficulty":"easy","1013-fibonacci-number.cpp":"d97548442871b90acc684c6112ef98939404f77d","1013-fibonacci-number.go":"b8f21930b143f04a378185d9cdaf04cc643a39b8"},"0116-populating-next-right-pointers-in-each-node":{"0116-populating-next-right-pointers-in-each-node.java":"6c7b95277a54ddba20010bda9b1ccdd7c824ebec","README.md":"04fdf61ef1b0d696b39681fc9e6dbade83bfe222","difficulty":"medium"}},"solved":17}}